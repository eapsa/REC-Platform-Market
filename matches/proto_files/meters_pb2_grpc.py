# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto_files import meters_pb2 as meters__pb2


class MetersServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddMeasurement = channel.unary_unary(
            '/proto.MetersService/AddMeasurement',
            request_serializer=meters__pb2.MeterEntry.SerializeToString,
            response_deserializer=meters__pb2.MeterResponse.FromString,
        )
        self.RetrieveMeasurement = channel.unary_unary(
            '/proto.MetersService/RetrieveMeasurement',
            request_serializer=meters__pb2.QueryMeters.SerializeToString,
            response_deserializer=meters__pb2.QueryResponse.FromString,
        )


class MetersServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveMeasurement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddMeasurement': grpc.unary_unary_rpc_method_handler(
            servicer.AddMeasurement,
            request_deserializer=meters__pb2.MeterEntry.FromString,
            response_serializer=meters__pb2.MeterResponse.SerializeToString,
        ),
        'RetrieveMeasurement': grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveMeasurement,
            request_deserializer=meters__pb2.QueryMeters.FromString,
            response_serializer=meters__pb2.QueryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'proto.MetersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class MetersService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddMeasurement(request,
                       target,
                       options=(),
                       channel_credentials=None,
                       call_credentials=None,
                       insecure=False,
                       compression=None,
                       wait_for_ready=None,
                       timeout=None,
                       metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MetersService/AddMeasurement',
                                             meters__pb2.MeterEntry.SerializeToString,
                                             meters__pb2.MeterResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveMeasurement(request,
                            target,
                            options=(),
                            channel_credentials=None,
                            call_credentials=None,
                            insecure=False,
                            compression=None,
                            wait_for_ready=None,
                            timeout=None,
                            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MetersService/RetrieveMeasurement',
                                             meters__pb2.QueryMeters.SerializeToString,
                                             meters__pb2.QueryResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
