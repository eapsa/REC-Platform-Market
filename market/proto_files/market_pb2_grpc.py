# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto_files import market_pb2 as market__pb2


class AuthenticatedMarketServiceStub(object):
    """This service is responsible for changing Database entries when asked via another microservice (ex. Transactions Microservice)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveMatches = channel.unary_unary(
            '/proto.AuthenticatedMarketService/RetrieveMatches',
            request_serializer=market__pb2.MatchesFilter.SerializeToString,
            response_deserializer=market__pb2.ListMatchResponse.FromString,
        )
        self.UpdateMatch = channel.unary_unary(
            '/proto.AuthenticatedMarketService/UpdateMatch',
            request_serializer=market__pb2.ListUpdateMatch.SerializeToString,
            response_deserializer=market__pb2.Empty.FromString,
        )


class AuthenticatedMarketServiceServicer(object):
    """This service is responsible for changing Database entries when asked via another microservice (ex. Transactions Microservice)
    """

    def RetrieveMatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticatedMarketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'RetrieveMatches': grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveMatches,
            request_deserializer=market__pb2.MatchesFilter.FromString,
            response_serializer=market__pb2.ListMatchResponse.SerializeToString,
        ),
        'UpdateMatch': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateMatch,
            request_deserializer=market__pb2.ListUpdateMatch.FromString,
            response_serializer=market__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'proto.AuthenticatedMarketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class AuthenticatedMarketService(object):
    """This service is responsible for changing Database entries when asked via another microservice (ex. Transactions Microservice)
    """

    @staticmethod
    def RetrieveMatches(request,
                        target,
                        options=(),
                        channel_credentials=None,
                        call_credentials=None,
                        insecure=False,
                        compression=None,
                        wait_for_ready=None,
                        timeout=None,
                        metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.AuthenticatedMarketService/RetrieveMatches',
                                             market__pb2.MatchesFilter.SerializeToString,
                                             market__pb2.ListMatchResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMatch(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.AuthenticatedMarketService/UpdateMatch',
                                             market__pb2.ListUpdateMatch.SerializeToString,
                                             market__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MarketServiceStub(object):
    """This service is responsible for handling non critical requests. (ex. Retrieving data for dashboards or auditing) 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMatches = channel.unary_unary(
            '/proto.MarketService/GetMatches',
            request_serializer=market__pb2.MatchesFilter.SerializeToString,
            response_deserializer=market__pb2.ListMatchResponse.FromString,
        )
        self.UpdatePrices = channel.unary_unary(
            '/proto.MarketService/UpdatePrices',
            request_serializer=market__pb2.ListPricesUpdate.SerializeToString,
            response_deserializer=market__pb2.Empty.FromString,
        )
        self.GetPrices = channel.unary_unary(
            '/proto.MarketService/GetPrices',
            request_serializer=market__pb2.PriceFilter.SerializeToString,
            response_deserializer=market__pb2.ListPrices.FromString,
        )


class MarketServiceServicer(object):
    """This service is responsible for handling non critical requests. (ex. Retrieving data for dashboards or auditing) 
    """

    def GetMatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePrices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetMatches': grpc.unary_unary_rpc_method_handler(
            servicer.GetMatches,
            request_deserializer=market__pb2.MatchesFilter.FromString,
            response_serializer=market__pb2.ListMatchResponse.SerializeToString,
        ),
        'UpdatePrices': grpc.unary_unary_rpc_method_handler(
            servicer.UpdatePrices,
            request_deserializer=market__pb2.ListPricesUpdate.FromString,
            response_serializer=market__pb2.Empty.SerializeToString,
        ),
        'GetPrices': grpc.unary_unary_rpc_method_handler(
            servicer.GetPrices,
            request_deserializer=market__pb2.PriceFilter.FromString,
            response_serializer=market__pb2.ListPrices.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'proto.MarketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class MarketService(object):
    """This service is responsible for handling non critical requests. (ex. Retrieving data for dashboards or auditing) 
    """

    @staticmethod
    def GetMatches(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MarketService/GetMatches',
                                             market__pb2.MatchesFilter.SerializeToString,
                                             market__pb2.ListMatchResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePrices(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MarketService/UpdatePrices',
                                             market__pb2.ListPricesUpdate.SerializeToString,
                                             market__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrices(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.MarketService/GetPrices',
                                             market__pb2.PriceFilter.SerializeToString,
                                             market__pb2.ListPrices.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
